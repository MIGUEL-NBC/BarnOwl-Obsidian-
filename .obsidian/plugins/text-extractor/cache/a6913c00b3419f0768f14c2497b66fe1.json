{"path":"To Be Organized/Product Manuals/VSM/vsmStudio Application Note 005 - Dynamic Attachment Scripts (V2)_New1.pdf","text":"Dynamic Attachment Scripts (DAS) vsmStudio Application Note AN-0005 v2 Work in Progress 2013-01-04 preliminary Michael Jones 04.01.2013 Application Note: Dynamic Attachment Scripts 2 | 28 © L-S-B Broadcast Technologies GmbH L-S-B Broadcast Technologies GmbH Konrad-Adenauer-Ring 13-15 65187 Wiesbaden, Germany www.l-s-b.de Application Note: Dynamic Attachment Scripts © L-S-B Broadcast Technologies GmbH 1 | 28 Table of Content 1 What are Dynamic Attachment Scripts? ......................................................................... 4 1.1 Do I have to use DAS? ............................................................................................ 4 1.2 Is DAS a programming language? ........................................................................... 4 1.3 Is it difficult to learn?................................................................................................ 4 1.4 And Now: A Word of Warning! ................................................................................. 4 2 Using Dynamic Attachment Scripts ................................................................................ 5 2.1 Editing ..................................................................................................................... 5 2.2 Tracing .................................................................................................................... 5 2.3 When are Dynamic Attachment Scripts processed? ................................................ 6 2.4 How are Dynamic Attachment Scripts processed? .................................................. 6 2.5 What if no new “Attachment” can been found? ........................................................ 6 2.5.1 What does this {null} mean? ............................................................................. 7 2.6 Can DAS change the function of a button? .............................................................. 8 2.7 Additional Aspects ................................................................................................... 8 2.7.1 Pseudo Devices ............................................................................................... 8 2.7.2 Meta Links ........................................................................................................ 8 2.7.3 Combining DAS with “jump to ‘this’ page” buttons ............................................ 8 2.8 Using DAS with Secondary Commands .................................................................. 8 3 Language Elements ....................................................................................................... 9 3.1 Reserved Keywords and Symbols ........................................................................... 9 3.2 Upper- and Lowercase ............................................................................................ 9 3.3 The slash character ................................................................................................. 9 3.4 Names containing spaces ......................................................................................10 3.5 Naming of Variables ...............................................................................................10 3.6 Use of Variables .....................................................................................................10 4 Language Reference ....................................................................................................11 4.1 Special Keywords ...................................................................................................11 4.1.1 If, Elseif, Else and Endif ..................................................................................11 4.1.2 Trace ...............................................................................................................12 4.1.3 Trigger ............................................................................................................12 4.1.4 xConnect .........................................................................................................12 4.2 Expressions – Starting Points .................................................................................13 4.2.1 Attached ..........................................................................................................13 4.2.2 Collection ........................................................................................................13 4.2.3 ConnectedSource ...........................................................................................13 4.2.4 Current ............................................................................................................13 4.2.5 LinkedTarget ...................................................................................................13 4.2.6 SelectedComponent ........................................................................................14 4.2.7 SelectedGadget ..............................................................................................14 4.2.8 SelectedNode .................................................................................................14 4.2.9 SelectedSource ...............................................................................................14 Application Note: Dynamic Attachment Scripts 2 | 28 © L-S-B Broadcast Technologies GmbH 4.2.10 SelectedTarget ................................................................................................14 4.2.11 SelectedTargets ..............................................................................................14 4.3 Expressions – Modifiers .........................................................................................15 4.3.1 And .................................................................................................................15 4.3.2 Bound .............................................................................................................15 4.3.3 CardinalSource ...............................................................................................15 4.3.4 Connected .......................................................................................................15 4.3.5 Contains ..........................................................................................................15 4.3.6 EffectiveSource ...............................................................................................16 4.3.7 False ...............................................................................................................16 4.3.8 FarSource .......................................................................................................16 4.3.9 Follow .............................................................................................................16 4.3.10 Has .................................................................................................................16 4.3.11 Is .....................................................................................................................16 4.3.12 Meta ................................................................................................................17 4.3.13 Not ..................................................................................................................17 4.3.14 Null ..................................................................................................................17 4.3.15 Or ....................................................................................................................17 4.3.16 PhysicalSource ...............................................................................................17 4.3.17 Pool .................................................................................................................18 4.3.18 RawSource .....................................................................................................18 4.3.19 Source ............................................................................................................18 4.3.20 Target .............................................................................................................18 4.3.21 True ................................................................................................................18 4.3.22 xSwap .............................................................................................................19 4.3.23 xTargetxpressions – Assignments ...................................................................................19 4.4.1 Activate = {parameter} .....................................................................................20 4.4.2 Active = {object} ..............................................................................................20 4.4.3 Enable = {object} .............................................................................................20 4.4.4 Source = {object} .............................................................................................20 4.4.5 Target = {object} ..............................................................................................20 4.4.6 Visibility = {object} ...........................................................................................20 5 Interacting with Secondary Commands.........................................................................21 5.1 Creating the secondary command entry .................................................................21 5.2 Assigning the DAS alias .........................................................................................21 5.3 Assigning the attachment from the script ................................................................22 5.4 DAS triggered secondary commands .....................................................................23 6 Tracing Dynamic Attachment Scripts ............................................................................24 Application Note: Dynamic Attachment Scripts © L-S-B Broadcast Technologies GmbH 3 | 28 Application Note: Dynamic Attachment Scripts 4 | 28 © L-S-B Broadcast Technologies GmbH 1 What are Dynamic Attachment Scripts? Dynamic Attachment Scripts allow the configurator to create sophisticated panels with dynamic and context dependent visualization and functionality. 1.1 Do I have to use DAS? No, a lot of workflow can be visualized using the standard panel buttons. 1.2 Is DAS a programming language? No, not really. Despite having similarities to programming languages, DAS is not a programming language and does not contain classical elements of programming languages like loops or types. DAS is more like explaining how to get to the next train station: “Take the first left, then the fifth right… oh, and if you see a Taxi – take it”. 1.3 Is it difficult to learn? As computers go, DAS will do exactly what you tell it to do. So at the beginning the biggest problem is not learning the actual DAS syntax, but to learn how formulate the actual problem. It is generally the best to build up the scripts step-by-step in a controlled environment. 1.4 And Now: A Word of Warning! Not everything that you can do with “Dynamic Attachment Scripts” must make sense. Think about every step and perform critical testing. Not doing so might lead to unwanted, even bizarre results.  Always spend a few moments testing for the situations that you are not expecting, like no target selected or wrong and unexpected sources.  Check for cases where the signal paths have different lengths depending on if or if not e.g. processing has been inserted.  Always remember that users can break anything.  If the script becomes longer than a few lines (e.g. 5), this is mostly a sign of a bad script.  Scripts do use CPU time - CPU time is valuable.  Have a few Aspirins ready – just in case… Application Note: Dynamic Attachment Scripts © L-S-B Broadcast Technologies GmbH 5 | 28 2 Using Dynamic Attachment Scripts 2.1 Editing Image 1: The DAS Editing Field The DAS is edited using the DAS editing field which is accessible through the property box when a panel button or a panel page item is selected. Once a script has been entered the button will display a green D. 2.2 Tracing Checking the “trace” check box in the lower left corner will send information about the script processing to the CommTrace application. This will give comprehensive feedback of how exactly the script resolves the dynamic attachment. When DAS trace in enabled on a button the button will show a red D. NOTE: Remember to disable trace once the script has been tested. Having two or more scripts tracing to CommTrace makes reading the output difficult and also has the potential of slowing down the system unnecessary. Chapter 6, “Tracing Dynamic Attachment Scripts” goes into more detail about reading and understanding the trace output. Application Note: Dynamic Attachment Scripts 6 | 28 © L-S-B Broadcast Technologies GmbH 2.3 When are Dynamic Attachment Scripts processed? It is important to remember that the system only processes scripts when the button or page item which contains the script is actually potential visible on an active hardware panel or vsmPanel. If the above condition is met, then the DAS will be processed whenever:  The script is edited.  A user presses a button on the panel which navigates or changes the selection.  A signal assignment changes.  An object, which has been referred to by the script, changes its state. Additional, the system may re-process the DAS at any time when it “feels” the need to do so, based to its internal database of dependencies. NOTE: Do not attempt to write scripts that assume any sequence or timing. 2.4 How are Dynamic Attachment Scripts processed? Assuming that the script does not contain any syntactical errors, the scripts are processed line by line, until the goal has been reached: To find a new [dynamic] attachment. A script may contain multiple different ways to find a new attachment – once one has been found the processing ends and this new attachment is used (Or analogue to giving somebody two ways to get to the next station – he won’t try the second it the first got him there). 2.5 What if no new “Attachment” can been found? If the script reaches the end of the script without finding a new attachment, the system uses the default attachment. The default attachment is whatever attachment has been specified by the configuration when the button or the page item was created. So for example, a source button might have been created by dragging the MUTE signal onto the button. This signal becomes the button’s default attachment. Therefore the button will fall back to become the MUTE source button if the script cannot find an alternative signal to display. Application Note: Dynamic Attachment Scripts © L-S-B Broadcast Technologies GmbH 7 | 28 2.5.1 What does this {null} mean? While testing scripts, using CommTrace, the expression {null} will be visible quite often. This generally indicates that the preceding keyword did not result in any usable e.g. signal. As a result of this, processing of the current script line will be ended and continues on the next line. Example Script: SelectedTarget / Source If the user has not selected any target on the panel yet or has pressed the escape button, the trace might look like this: -- SelectedTarget {null} / Source > Assign: {null} Once the user selects a target, the trace might look like this: -- SelectedTarget vTarget 2 / Source vSource 2 > Assign: {Signal: vSource 2} The yellow keywords are the processed keywords; results are displayed in cyan and not processed keywords are displayed in gray. In the first trace, the greyed keywords indicate that these were not processed further as there is no point trying to find the source of {null} aka “nothing selected”. For more examples see chapter 6, “Tracing Dynamic Attachment Scripts”. Application Note: Dynamic Attachment Scripts 8 | 28 © L-S-B Broadcast Technologies GmbH 2.6 Can DAS change the function of a button? No, the originally assigned function of the button cannot be modified by the script. This said, a script can change the visibility of a button, thereby allowing, e.g. in dependency of a context, a button to be hidden or shown. This can be used to create the illusion of a button changing its function. 2.7 Additional Aspects 2.7.1 Pseudo Devices A lot of DAS are built around pseudo devices e.g. to display and modify audio channels associated with video signals. Two important aspects must be kept in mind regarding pseudo devices: NOTE: Only the bound pseudo device is accessible via DAS. Also, the pseudo device columns are accessed by name: Changing the name of a pseudo device column will effectively destroy the relationship between the scripts and the columns and the scripts will have to be edited accordingly. 2.7.2 Meta Links Meta Links (former known as Meta Gadgets) allow Gadgets, GPIs, Storage Groups, Signals and more to be logically linked to a Signal. These can be accessed by the script. As with the pseudo devices, access is by name and the same considerations regarding renaming apply (see above). 2.7.3 Combining DAS with “jump to ‘this’ page” buttons While possible, using dynamic attachments on control buttons with the “jump to ‘this’ page” option is very challenging to say the least. Bear in mind, that the script is only processed when the button’s page is visible and will retain the last attachment until visible again. Also there is a miniscule but possible chance that the user might navigate past the buttons visible phase before the DAS has a chance to be processed. 2.8 Using DAS with Secondary Commands It is possible to modify the button’s secondary commands with a DAS. See chapter 5, “Interacting with Secondary Commands” for more information. Application Note: Dynamic Attachment Scripts © L-S-B Broadcast Technologies GmbH 9 | 28 3 Language Elements 3.1 Reserved Keywords and Symbols The following is a list of reserved keywords and symbols that are ether implemented or simply reserved for future use (keywords currently implemented are shown in bold): ' - -- ! != $ % & && ( ) * , . / : ; ? @ [ \" ] ^ { | || } ~ + ++ < << <= = == > >= >> Activate Active alias And as Attached Blind bool Bound break Button byte CardinalSource catch char Collection common Connected ConnectedSource const Contains Current delete do EffectiveSource else elseif Enable endif error false FarSource Find float Follow for forward fSource Gadget Has if Inserted Inserts int is Layer LinkedTarget Locked Meta new Not null object Or Parked PhysicalSource Pool Pooled print pSource RawSource read return rsn Select SelectedComponent SelectedGadget SelectedNode SelectedSource SelectedTarget SelectedTargets Source string Tag Target throw to Trace Trigger true try until Use Used Visibility void Where while xConnect xSwap xTarget 3.2 Upper- and Lowercase All keywords, variable names and named references are non-case-sensitive, therefore writing “Meta”, “META” or “meta” will all mean the same. Some joined keywords like “SelectedTarget” are written with capitals to increase the readability and it is recommended to use the same writing style. 3.3 The slash character The slash ( / ) is used to join a sequence of keywords within an expression. Application Note: Dynamic Attachment Scripts 10 | 28 © L-S-B Broadcast Technologies GmbH 3.4 Names containing spaces Sometimes, e.g. when accessing Meta Links or Pseudo Device Columns, the name contains spaces. In this case this name must be surrounded with quotation marks “…”. For example, to access a Meta Link called Frame Sync, the name must be written as “Frame Sync”. For the sake of readability it is recommended to place all names in quotation marks all of the time, this makes it easier for the casual reader to identify names from keywords. 3.5 Naming of Variables Variable names should begin with an underline (_) or a valid alphabetic character. The following characters may be both alphabetic and numeric as well as an underline (_). The name may not contain any spaces or any of the reserved symbols. Valid variable names: _Bus, _Testing, _MCR_Monitor5, _Übergabe, 储存室, хранилище Invalid variable names: Post-Processing, Bad$Idea, 2 nd NOTE: Although all words not contained in the reserved keyword list, may be used as variable names it is strongly recommended to use the underline character _ to prefix variables. E.g. to write _myVariable. This also increases the readability and reduces the risk of clashing with newly introduced keywords at a later date. 3.6 Use of Variables Variables are used in DAS to ether increase readability by spitting elsewise long lines into more manageable parts or to store information for later use. Variables are persistent on a per button or page item base. Note: There is currently no way to share information across buttons. Example script without variables: SelectedTarget / Source / Meta: “Q1” / Source: “Audio 1” / Source / Source / Source SelectedTarget / Source / Meta: “Q1” / Source: “Audio 1” / Source / Source SelectedTarget / Source / Meta: “Q1” / Source: “Audio 1” / Source Example script with variable: _Audio = SelectedTarget / Source / Meta: “Q1” / Source: “Audio 1” _Audio / Source / Source / Source _Audio / Source / Source _Audio / Source Application Note: Dynamic Attachment Scripts © L-S-B Broadcast Technologies GmbH 11 | 28 4 Language Reference Syntax used in this document: [ optional ] Information in Square Brackets is optional < parameter > Pointy Brackets indicate required information { object type } Curly Brackets indicate the object type that the keywords following may be applied too. 4.1 Special Keywords 4.1.1 If, Elseif, Else and Endif The keywords If, Elseif, Else and Endif provide the base for conditional operations. Please note that most DAS do not require any conditional operations due to the way the processing will be ended when an attachment has been found. Simply try the least likely first. Usage: If ( < conditional expression > ) < processed when true > or If ( < conditional expression > ) < processed when true > < processed when true > Endif or If ( < conditional expression > ) < processed when true > Else < processed when false > Endif or If ( < conditional expression > ) < processed when true > ElseIf (< conditional expression processed when previous was false > ) < processed when true > Endif If the conditional expression is true the corresponding expression will be executed. The expression is considered true when it results is a valid signal or other object. The expression is considered false if its result is {null}. The If statement can be nested and as many ElseIf as needed can be added to an If statement. When using the one line version (see below) no EndIf needs to be added, in all other cases an EndIf must conclude the If statement. Examples: If ( SelectedTarget / Source ) _Remember = SelectedTarget / Source If ( SelectedTarget ) _Remember = SelectedTarget / Source Else _Remember = Attached Endif Application Note: Dynamic Attachment Scripts 12 | 28 © L-S-B Broadcast Technologies GmbH 4.1.2 Trace Usage: Trace [comment] - obsolete The trace keyword will activate the trace to CommTrace and is generally placed on the first line. The trace keyword should be removed from the script when the evaluation and testing of the script has been completed. NOTE: The trace keyword is no longer required, as the trace check box in the property box offers a far better option. The trace keyword should be removed from all scripts. 4.1.3 Trigger Usage: Trigger This keyword allows the script to trigger the execution of secondary commands which have had the secondary condition set to “DAS Trigger”. NOTE: In case of abusive or careless use of this keyword, massive amounts of operations could be triggered. As a countermeasure, the system will only trigger the secondary commands when the trigger keyword is called the first time or when the previous script processing did not call the trigger command. 4.1.4 xConnect Usage: xConnect This keyword allows the script to trigger the attached node to be connected. NOTE: As a protection against endless self-triggered reparsing of the script due to the resulting connection, the connection will not execute if the connection is already made. Also, if the xConnect command does trigger connections to frequent the script might be suspended. Application Note: Dynamic Attachment Scripts © L-S-B Broadcast Technologies GmbH 13 | 28 4.2 Expressions – Starting Points Every expression needs a starting point, e.g. a signal or object to begin with. One of the most commonly used starting points is SelectedTarget which will return the target currently selected on the panel. Beginning with the starting point, the scripts instructs the system how to “walk” the signal path, meta links or pseudo devices to find the desired attachment. 4.2.1 Attached Usage: Attached [ /… ] This selects the button’s original default attachment. 4.2.2 Collection Usage: Collection: “<name>” [ :…] Selects a collection specified by name. Results in {null} if no collection with the specified name could be found. Collections can contain signals or other components and are application specific (Documentation is provided only when required). 4.2.3 ConnectedSource Usage: ConnectedSource [ /…] This selects the source that is connected to the target currently selected on the panel. It is {null} if no source is connected or no target is selected. An alternative way to express this would be to write SelectedTarget / Source. 4.2.4 Current Usage: Current [ /… ] This selects the dynamic attachment that has been evaluated by the script during the previous parse. 4.2.5 LinkedTarget Usage: LinkedTarget [ / … ] This selects the signal that was transferred to this panel via the “panel link” button using the “Transfer selected Target to other panel” option. Application Note: Dynamic Attachment Scripts 14 | 28 © L-S-B Broadcast Technologies GmbH 4.2.6 SelectedComponent Usage: SelectedComponent [ /… ] Selects the component, but not signal, that a user might have selected on the panel. This might be a gadget parameter or a Node (cross-point). It is {null} if nothing has been selected or the selected component is not a gadget parameter or node. 4.2.7 SelectedGadget Usage: SelectedGadget [ /… ] This selects the gadget parameter that a user has selected on the panel. Returns {null} if nothing has been selected or the selected component is not a gadget parameter. 4.2.8 SelectedNode Usage: SelectedNode [ /… ] This selects the node (cross-point) that a user might have selected on the panel. Returns {null} if nothing has been selected or the selected component is not a node. 4.2.9 SelectedSource Usage: SelectedSource [ / …] Selects the signal currently selected as source, but not connected, on the panel. It is very important to realize that this is the source that the user has selected and not the source currently connected to the target which is currently selected on the panel. When the user selects a new source by pressing a button, this becomes the return value of SelectedSource until the source becomes the source of the selected target. On a panel without a TAKE or an ENABLE button this might only be the case for a few milliseconds, after which SelectedSource will return {null} again. 4.2.10 SelectedTarget Usage: SelectedTarget [ / … ] Selects the target currently selected on the panel. This is the most common starting point for dynamic attachment script. 4.2.11 SelectedTargets Usage: SelectedTargets [ / … ] This selects a collection of all targets currently selected by the user (Most likely using the multi-target or the multi-target from source buttons). Application Note: Dynamic Attachment Scripts © L-S-B Broadcast Technologies GmbH 15 | 28 4.3 Expressions – Modifiers After establishing a starting point it is possible to “walk-around” in the dependencies of the components e.g. find the source of a signal or get an associated gadget parameter. Most of these modifiers are specific to the type of component that is currently selected. If a modifier cannot be applied to a component type, the result will be {null} and parsing is continued in the next line. 4.3.1 And Usage: <conditional expression> And <conditional expression> [And…] This results in a {true} if the left and right hand expressions are true. Mostly used with if statement. 4.3.2 Bound Usage: {object} / bound [ /… ] This will instruct the script to accept and use the right hand result even if it is {null}. The default behaviour would be to a) continue operation and b) use the default attachment if at the end if script execution the result is {null}. Yet, in some cases, e.g. when retrieving a pseudo device, the fact that there is none is a valid and usable information. 4.3.3 CardinalSource Usage: {Signal} / CardinalSource [ /… ] This selects the next source up the signal path, which is marked as cardinal by the cardinal attribute or has no further source. The cardinal attribute is used to mark signals that have a special significance to the workflow making it easier to locate them with DAS. 4.3.4 Connected Usage: {node} / connected [ /… ] This will result in {null} if the specified node’s source and target are not connected. If the source and target are connected then the result is the specified node. 4.3.5 Contains Usage: {Collection} / Contains [ … ] Results in right hand object if this object is contained in the left hand collection. If it is not in the collection the result is {null}. Application Note: Dynamic Attachment Scripts 16 | 28 © L-S-B Broadcast Technologies GmbH 4.3.6 EffectiveSource Usage: {Signal} / EffectiveSource [ /… ] This selects the effective source of the currently selected signal. This is the signal which would generally be displayed on e.g. UMDs. 4.3.7 False Usage: False This results in a {false}. Mostly used with conditions and to control the visibility or enable state of an item. 4.3.8 FarSource Usage: {Signal} / FarSource [ /… ] {Signal} / fSource [ /… ] - obsolete This selects the source at the far source end of the signal path. This will walk up the signal path until it finds the signal which has no further source itself. 4.3.9 Follow Usage: {parameter} / follow = {parameter} {parameter} / follow = null This instructs the left parameters to follow any change to the parameter on the right. Specifying the keyword null instead of a parameter will revoke the dependency. The follow dependency is established in the parameter; therefore the dependency will remain even if the button that established the dependency is no longer visible. Also it means that only one panel should attempt to create or modify a follow dependency of a given left hand parameter. 4.3.10 Has Usage: {object} has <condition> Results in left hand object if the condition is met. If not the result is {null}. Valid conditions: {signal} has Inserts - true if signal has active inserts / processing. 4.3.11 Is Usage: {object} is <condition> Results in left hand object if the condition is met. If not the result is {null}. Application Note: Dynamic Attachment Scripts © L-S-B Broadcast Technologies GmbH 17 | 28 Valid conditions: {signal} is Used - true if signal is used [by a target]. {signal} is Locked - true if signal is locked. {signal} is Blind - true if signal is a blind source. {gpi} is true - true if gpi is active. {gpi} is false - true if gpi is inactive. {node} is connected - true if node’s target and source are connected. 4.3.12 Meta Usage: {Signal} / Meta [ /… ] {Signal} / Gadget [ /… ] - obsolete 4.3.13 Not Usage: not <…> This will invert the Boolean result of the right hand operation. 4.3.14 Null Usage: null Results in {null}. Mostly used within conditions when a variable has to be set to {null}. 4.3.15 Or Usage: <conditional expression> Or <conditional expression> [Or…] This results in a {true} if the left or right hand expression are true. Mostly used with if statements. 4.3.16 PhysicalSource Usage: {Signal} / PhysicalSource [ /… ] {Signal} / pSource [ /… ] - obsolete This selects the physical source of the currently selected signal. Within the system, a lot of signals can be virtual signals which abstract the use of the actual physical signals, using the PhysicalSource keyword will side-step any virtual signals and select the effective physical source. Application Note: Dynamic Attachment Scripts 18 | 28 © L-S-B Broadcast Technologies GmbH 4.3.17 Pool Usage: {Signal} / Pool : “<name of pool>” [ / <access> ] {Signal} / Pool ( {layer qualifying signal } ) : “<name of pool>” [ / <access> ] Retrieve a pool entry from a signal, where “name of pool” corresponds to the name of the pool as specified in the configuration’s pooling settings. If the signal is a source on multiple layers it might be necessary to qualify which layer is meant, this is done by specifying a signal which is on the layer required – in the most cases this ends up to be the starting point used in the current line. Once a pool has been retrieved, use source to access the signal’s internal pool source signal, target to access the signal’s internal pool target signal or inserted to access the signal inserted into signal’s pool entry. 4.3.18 RawSource Usage: {Signal} / Source [ /… ] This selects the source of the currently selected signal, including any internal, tie-lines or processing signals. 4.3.19 Source Usage: {Signal} / Source [ /… ] {Node} / Source [ /… ] This selects the source of the currently selected signal or node. In the case of a signal this will be the source most commonly understood by the user as the source which means any tie-lines, internal signals and processing is skipped. 4.3.20 Target Usage: {Signal} / Target [ /… ] This selects the least recently connected target of the currently selected signal. 4.3.21 True Usage: true This results in a {true}. Mostly used with conditions and to control the visibility or enable state of an item. Application Note: Dynamic Attachment Scripts © L-S-B Broadcast Technologies GmbH 19 | 28 4.3.22 xSwap Usage: {Signal} / xSwap [ /… ] When accessing a signal’s pseudo devices, there is the source and a target side of the pseudo device to be considered. By default, using {signal} : “name of column”, the appropriate side is used. In some cases it is necessary to swap the side used in order to access e.g. the pseudo devices on a source’s target side. 4.3.23 xTarget Usage: {Signal} / xTarget [ /… ] This selects the 1:1 target of the currently selected signal. When using 1:1 emulation both a 1:1 target and 1:n targets can be connected to a source at the same time. This keyword will retrieve the target that is used for the 1:1 connection. 4.3.24 << Usage: {target signal} << {source signal} This results in a node that corresponds with the specified target and source signal. This can be effectively be used to construct nodes from independent object sources e.g. from the original button attachment and a source of the selected target. This is very powerful together with secondary commands. 4.3.25 == Usage: {object} == {object} {parameter} == “string” This results {true} if the left and right objects are equal or if the parameter’s value equals the specified string. 4.3.26 != Usage: {object} != {object} {parameter} != “string” This results {true} if the left and right objects are not equal or if the parameter’s value does not equals the specified string. 4.4 Expressions – Assignments Some commands are assigned similar to variables: Application Note: Dynamic Attachment Scripts 20 | 28 © L-S-B Broadcast Technologies GmbH 4.4.1 Activate = {parameter} At the end of the script the system will attempt to activate the specified parameter on the panel. This parameter will receive user changes e.g. via a rotary encoder. 4.4.2 Active = {object} The button’s active state and colour will follow the state of the {object}, where {null} or {false} will be inactive and {true} or any valid object, signal or parameter will be active. NOTE: The active state is not persistent and has to be re set every time the script is processed or the active state will revert to the default behaviour. 4.4.3 Enable = {object} The button’s or panel item’s enable state will follow the state of the {object}, where {null} or {false} will be disabled and {true} or any valid object, signal or parameter will be enabled. NOTE: The enable state is persistent and will only change if the script actively changes it. 4.4.4 Source = {object} If the button is a control button this will modify the control buttons node’s source. NOTE: To simulate the scripts normal end when goal found behaviour, the target can only be modified by the first none {null} object. 4.4.5 Target = {object} If the button is a control button this will modify the control buttons node’s target. NOTE: To simulate the scripts normal end when goal found behaviour, the target can only be modified by the first none {null} object. 4.4.6 Visibility = {object} The button’s or panel item’s visibility will follow the state of the {object}, where {null} or {false} will be invisible and {true} or any valid object, signal or parameter will be visible. NOTE: The visibility state is persistent and will only change if the script actively changes it. Application Note: Dynamic Attachment Scripts © L-S-B Broadcast Technologies GmbH 21 | 28 5 Interacting with Secondary Commands It is possible to combine secondary commands with DAS on panel buttons. In order to do so the secondary command must be prepared in two steps: 5.1 Creating the secondary command entry First, add a Secondary Command entry using an appropriate object, which is going to act as the template for the dynamic assignment. This should be an object e.g. a gadget parameter that matches the type and usage of the dynamic attachment that should later be controlled. NOTE: The template entry will never be actually used when the secondary commands are executed. If the DAS provides a dynamic attachment which is {null} or inconclusive e.g. is a different object type, the entry is skipped. 5.2 Assigning the DAS alias Using the drop-down menu, select “Assign DAS Alias” and enter an alias into the field. The alias provided is the binding link between the DAS and this secondary command. The alias is case insensitive, but correct spelling must be assured. Application Note: Dynamic Attachment Scripts 22 | 28 © L-S-B Broadcast Technologies GmbH 5.3 Assigning the attachment from the script Now it is possible to write a DAS which will provide a dynamic attachment for this entry. A DAS statement corresponding with the above secondary command might look as follows: “Gain Left” = SelectedTarget / Source / Meta: “Gain” Please note the quotation marks around “Gain Left”. This is necessary due to the space contained within this alias. Any alias what contains spaces or other non-alphabetic characters must be enclosed within quotation marks for simple words they may be omitted. Further example: \"Gain L\" = SelectedTarget / Source / Meta: \"Gain\" \"Gain R\" = SelectedTarget: \"Audio 2\" / Source / Meta: \"Gain\" The matching Secondary Commands: NOTE: As advised before, it is recommended to add an underline character ( _ ) at the beginning of all variables to avoid conflicts with predefined keywords. Also the above use of spaces, thou possible, was only done of demonstration purpose. Application Note: Dynamic Attachment Scripts © L-S-B Broadcast Technologies GmbH 23 | 28 5.4 DAS triggered secondary commands It is possible to have dynamic attachment script trigger a secondary command. In order to do this the secondary command’s condition must be set to “DAS Trigger”. In the example above the secondary command will disconnect the signal “Camera 1” when triggered from the DAS. Script triggered commands can also be dynamically assigned secondary commands as described in the previous chapter. NOTE: The secondary commands with the condition “DAS Triggered” are executed after the script parses the Trigger keyword. In the case of abusive or careless use of this keyword, massive amounts of operations could be triggered. As a countermeasure, the system will only trigger the secondary commands when the trigger keyword is called the first time or when the previous script parse did not call the trigger command. Application Note: Dynamic Attachment Scripts 24 | 28 © L-S-B Broadcast Technologies GmbH 6 Tracing Dynamic Attachment Scripts Telephone: +49 (611) 262390-0 E-Mail Support: support@l-s-b.de E-Mail Service: service@l-s-b.de","libVersion":"0.3.1","langs":""}